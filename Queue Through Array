#include <iostream>
using namespace std;
#define max_sz 20 //setting micro definition. 
int queue01[max_sz], queue02[max_sz];	//declared as global variables.
int front1 = -1, front2 = -1, rear1 = -1, rear2 = -1;
class start_as_front_of_stack
{
public:
	void enqueue()
	{
		int val;
		if (rear1 == max_sz - 1)
		{
			cout << "\nNOTE: Queue Overflow.";
		}
		else
		{
			if (front1 >= -1)
			{
				front1 = 0;
				cout << "Enter value for enqueue: ";
				cin >> val;
				rear1++;
				queue01[rear1] = val;
			}
		}
	}
	void dequeue()
	{	//to check whehter stack is empty or not.
		if (front1 == -1)
		{
			cout << "\nNOTE: Queue Underflow.";
		}
		else
		{
			cout << "\nThe front value " << queue01[front1] << " is being deleted.\n";
			front1++;
		}
	}
	void display()
	{
		if (rear1 == -1)
		{
			cout << "\nThe queue is empty.";
			return;
		}
		else
		{
			cout << "\nPrinting queue through array: ";
			for (int sf = front1; sf <= rear1; sf++)
			{
				cout << queue01[sf] << " ";
			}
		} cout << "\n\n";
	}
};
int main()
{
	start_as_front_of_stack q1;
	int ch1, ch2; int num; bool loop_end2 = 0;

	cout << "===QUEUE THROUGH ARRAY IMPLEMENTAION===\n";
	cout << "01.Suppose start of queue as front.\nChoice: ";
	cin >> ch1;
	switch (ch1)
	{
	case 01:
	{
		do
		{
			cout << "\n01.Enqueue\n02.Dequeue\n03.Display\n04.Exit\nChoice: ";
			cin >> ch2;
			switch (ch2)
			{
			case 01:
				cout << "\nEnter Number of values you want to enqueue: ";
				cin >> num;
				for (size_t sf = 0; sf < num; sf++) { q1.enqueue(); }
				break;
			case 02: q1.dequeue(); break;
			case 03: q1.display(); break;
			case 04:
				loop_end2 = 1;
				break;
			default:
				cout << "\nNote: Invalid choice try again.\n"; break;
			}
		} while (!loop_end2);
	}break;
	default: cout << "\nNote: Invalid choice try again.\n"; break;
	}
}
