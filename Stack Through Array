#include <iostream>
using namespace std;

#define max_sz 100 //setting micro definition. 
int stack01[max_sz], stack02[max_sz], top1 = -1, top2 = -1; //declared as global variables.
//there are two ways to implement stack. by considering bottom as top or end as top.
//when considering bottom or last element as top the insertation and deletion will take place in tail / end.
//when considering end element as top the insertation and deletion will take place in bottom.

class bottom_as_top_of_stack
{ //in this class i am considering bottom as my top.
public:
	void push()
	{
		int val;
		if (top1 == max_sz - 1)
		{ //to check whether stack is full or not.
			cout << "NOTE: STACK IS OVERFLOW\n";
		}
		else
		{ //if not then it will take value and insert it in stack.
			cout << "Enter element for insertion: ";
			cin >> val;
			top1++;
			stack01[top1] = val;
		}
	}
	void pop()
	{ //to check whehter stack is empty or not.
		if (top1 == -1) { cout << "\nNOTE: STACK IS UNDERFLOW\n"; }
		else
		{ //deleting value in stack and decresing its top limit.
			cout << "\nDeleting value from stack is : " << stack01[top1];
			top1--;
			cout << "\nValue is poped from stack.\n";
		}
	}
};
class tail_as_top_of_stack
{ //in this class i am considering tail/end as my top.
public:
	void push()
	{
		int val;
		if (top2 == max_sz - 1) { cout << "NOTE: STACK IS OVERFLOW\n"; }
		//to check whether stack is full or not. 
		else
		{//if not then it will take value and insert it in stack.
			cout << "Enter element for insertion: ";
			cin >> val;
			for (int sf = top2; sf >= 0; sf--)
			{ //IN loop we are shifting elements one position forward so that we can insert 
				stack02[sf + 1] = stack02[sf];
			}
			stack02[0] = val;
			top2++;
		}
	}
	void pop()
	{
		if (top2 == -1)
		{//to check whehter stack is empty or not.
			cout << "\nNOTE: STACK IS UNDERFLOW\n";
		}
		else
		{ //deleting value in stack and decresing its top limit.
			cout << "\nDeleting value from stack is : " << stack02[top2];
			top2--;
			cout << "\nValue is poped from stack.\n";
		}
	}
};
void display(int stk[], int top)
{
	cout << "\nPrinting stack through array: ";
	for (int sf = 0; sf <= top; sf++)
	{
		cout << stk[sf] << " ";
	} cout << "\n";
}

int main()
{
	bottom_as_top_of_stack stk1; int ch1, ch2, ch3; int num;
	tail_as_top_of_stack stk2; bool loop_end2 = 0, loop_end3 = 0;
	cout << "===STACK THROUGH ARRAY IMPLEMENTAION===\n";
	cout << "01.Suppose bottom of stack as top.\n02.Suppose tail\\end of stack as top.\nChoice: ";
	cin >> ch1;
	switch (ch1)
	{
	case 01:
	{
		do
		{
			cout << "\n01.Push\n02.Pop\n03.Display\n04.Exit\nChoice: ";
			cin >> ch2;
			switch (ch2)
			{
			case 01:
				cout << "\nEnter Number of values you want to insert: ";
				cin >> num;
				for (size_t sf = 0; sf < num; sf++) { stk1.push(); }
				break;
			case 02: stk1.pop(); break;
			case 03: display(stack01, top1); break;
			case 04:
				loop_end2 = 1;
				break;
			default:
				cout << "\nNote: Invalid choice try again.\n"; break;
			}
		} while (!loop_end2);
	}break;
	case 02:
	{
		do
		{
			cout << "\n01.Push\n02.Pop\n03.Display\n04.Exit\nChoice: ";
			cin >> ch3;
			switch (ch3)
			{
			case 01:
				cout << "\nEnter Number of values you want to insert: ";
				cin >> num;
				for (size_t sf = 0; sf < num; sf++) { stk2.push(); }
				break;
			case 02: stk2.pop(); break;
			case 03: display(stack02, top2); break;
			case 04:
				loop_end3 = 1;
				break;
			default: cout << "\nNote: Invalid choice try again.\n"; break;
			}
		} while (!loop_end3);
	} default: cout << "\nNote: Invalid choice try again.\n"; break;
	}
}
